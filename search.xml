<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[认真看完这一篇，不懂Retrofit？不存在的]]></title>
      <url>/2017/04/28/RetrofitSource/</url>
      <content type="html"><![CDATA[<blockquote>
<p>虽然一个人<br>我并不孤独<br>在心中你陪我看每一个日出</p>
</blockquote>
<p>　　不要总是那么不甘寂寞，因为一个人的你可以让自己心存很多念想，这些念想也必将成为你奋斗的目标与动力。（开篇推歌一首，猛戳<a href="http://music.163.com/#/song?id=27588486" target="_blank" rel="external">《陪我看日出》</a>^_^）</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<p><em><a href="https://github.com/ms-liu/SimpleRetrofit/tree/master" target="_blank" rel="external">项目——SimpleRetrofit地址：https://github.com/ms-liu/SimpleRetrofit/tree/master</a></em></p>
<hr>
<h3 id="一、序言"><a href="#一、序言" class="headerlink" title="一、序言"></a>一、序言</h3><blockquote>
<p>Retrofit<br>　[‘retroʊfɪt]<br>　v.　 样式翻新；改进<br>　n.　 翻新；改进</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　为什么先将Retrofit的英文单词解释放在最前面？</div><div class="line">　　答：很简单就是想提高一下大家英语水平（[斜眼笑]）。</div></pre></td></tr></table></figure>
<p>　　为什么先将Retrofit单词解释放在最前面，其实大家都知道编码当中有一个难点就是起名字，因为好的名字总是很容易知道类的功能、方法的作用。所以个人觉得在带着大家剖析Retrofit之前，有必要先让大家知道Retrofit单词的意思。因为这一个单词还是能够很好的说明Retrofit功能，可以说是它的核心思想吧。<br>　　话不多少，下面我们正式开始，因为文章篇幅较长，所以建议在电脑上，如果可以的话，可以打开<a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit源码</a>或者<a href="[https://github.com/ms-liu/SimpleRetrofit/tree/master](https://github.com/ms-liu/SimpleRetrofit/tree/master">SimpleRetrofit源码</a>)。</p>
<h4 id="1、如何使用？"><a href="#1、如何使用？" class="headerlink" title="1、如何使用？"></a>1、如何使用？</h4><p>　　我相信来看这篇文章的人，肯定是已经使用过Retrofit，并且乐于学习的优秀“程序猿”。这里只是想重新勾起你们的使用印象，希望耐心的看一下，防止下面剖析的时候会让自己处于懵的状态。<br>　Demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">   //new出构建Retrofit的Builder器</div><div class="line">Retrofit.Builder builder = new Retrofit.Builder();</div><div class="line"></div><div class="line">//添加请求BaseURL、转换工厂、请求适配工厂、 调用构建方法，构建出Retrofit对象</div><div class="line">Retrofit retrofit = builder</div><div class="line">            .baseUrl(API_URL)</div><div class="line">            .addConverterFactory(new DefaultConverterFactory())</div><div class="line">            .addCallAdapterFactory(DefaultCallAdapterFactory.INSTANCE)</div><div class="line">            .build();</div><div class="line"></div><div class="line">//Retrofit调用create对象，创建API接口对象</div><div class="line">Weather weather = retrofit.create(Weather.class);</div><div class="line"></div><div class="line">//调用API接口中的方法，获取到Call对象</div><div class="line">Call&lt;String&gt; call = weather.getWeather(&quot;%E5%98%89%E5%85%B4&amp;&quot;, &quot;json&quot;, &quot;5slgyqGDENN7Sy7pw29IUvrZ&quot;);</div><div class="line"></div><div class="line">//调用Call的请求方法，</div><div class="line">call.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">    //得到相应结果</div><div class="line">    @Override</div><div class="line">    public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line">        String body = response.body();</div><div class="line">        System.out.println(&quot;===============&quot;+body);</div><div class="line">    &#125;</div><div class="line">    //得到失败结果</div><div class="line">    @Override</div><div class="line">    public void onFailure(Call&lt;String&gt; call, Throwable throwable) &#123;</div><div class="line">        System.err.println(&quot;异常：&quot;+throwable.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="二、剖析"><a href="#二、剖析" class="headerlink" title="二、剖析"></a>二、剖析</h3><p>　　　　</p>
<h4 id="1、掌握Retrofit类"><a href="#1、掌握Retrofit类" class="headerlink" title="1、掌握Retrofit类"></a>1、掌握Retrofit类</h4><p>　　先看下面这个图，掌握大概流程，让脑海中有这副图的印象。<br>   <img src="http://upload-images.jianshu.io/upload_images/1906608-7643b46a4c41752f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Retrofit简易流程架构图"></p>
<h5 id="（1）Retrofit构造器"><a href="#（1）Retrofit构造器" class="headerlink" title="（1）Retrofit构造器"></a>（1）Retrofit构造器</h5><p>　　进入Retrofit类中，先去看他的构造方法（ 毕竟要去使用一个类，我们首要的是能拿到它的对象，所以先看它的构造方法）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,</div><div class="line">    List&lt;Converter.Factory&gt; converterFactories, List&lt;CallAdapter.Factory&gt; adapterFactories,</div><div class="line">    Executor callbackExecutor, boolean validateEagerly) &#123;</div><div class="line">  this.callFactory = callFactory;</div><div class="line">  this.baseUrl = baseUrl;</div><div class="line">  this.converterFactories = unmodifiableList(converterFactories); // Defensive copy at call site.</div><div class="line">  this.adapterFactories = unmodifiableList(adapterFactories); // Defensive copy at call site.</div><div class="line">  this.callbackExecutor = callbackExecutor;</div><div class="line">  this.validateEagerly = validateEagerly;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　不难发现的是他需要大量的构造参数，要new出这样的对象，无疑是痛苦且不具条理的。所以Retrofit选择不对外提供该构造方法，那么他是如何创建对象的呢？答案就是选择<strong>Builder模式</strong>，来一步步的传入所需要的参数，将整个构建过程清晰化，条理化。</p>
<h5 id="（2）Retrofit内部类——Builder"><a href="#（2）Retrofit内部类——Builder" class="headerlink" title="（2）Retrofit内部类——Builder"></a>（2）Retrofit内部类——Builder</h5><p>　　其实Builder中，就是将Retrofit构造方法中所需的构造参数，分门别类的添加进去，并且对于部分参数可义进行默认实现或初始化添加。主要部分的如下：</p>
<blockquote>
<ul>
<li>baseUrl(String baseUrl)——添加基础URL</li>
<li>client(OkHttpClient client)——添加OkHttpClient对象</li>
<li>addConverterFactory()——添加生产Converter的工厂类</li>
<li>addCallAdapterFactory()——添加生产CallAdapter的工厂类</li>
</ul>
</blockquote>
<p>　　简单讲一下这两个工厂类：</p>
<ul>
<li><strong>Converter.Factory</strong></li>
</ul>
<p>　　那么现在开始思考，一个请求我们需要处理哪些东西呢？对~没错！就是<strong>RequestBody</strong> 和 <strong>ResponseBody</strong>（^_^）；所以在Converter.Factory中要做的就是创建这两种对应的需求转换器Converter，而这个Factory就是在Converter这个接口中的内部类。<br>　　所以<strong>Converter.Factory是生产RequestBodyConverter和ResponseBodyConverter的生产厂或者车间</strong>。记住！！！对于这个工厂了解到这里就足够了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * ==============================================</div><div class="line"> * 类名：Converter(Interface)</div><div class="line"> *   装换器接口</div><div class="line"> *</div><div class="line"> *   内部包含了一个创建转换器的抽象工厂类</div><div class="line"> *</div><div class="line"> *   通过调用不同“加工方法”创建出不同转换器</div><div class="line"> *</div><div class="line"> *    泛型：</div><div class="line"> *    F=&gt;转换前类型</div><div class="line"> *    T=&gt;转换后类型</div><div class="line"> * ==============================================</div><div class="line"> */</div><div class="line">public interface Converter&lt;F,T&gt; &#123;</div><div class="line">    /**</div><div class="line">     * 具体转换方法</div><div class="line">     * @param f</div><div class="line">     * @return</div><div class="line">     * @throws IOException</div><div class="line">     */</div><div class="line">    T convert(F f) throws IOException;</div><div class="line"></div><div class="line">    abstract class Factory&#123;</div><div class="line"></div><div class="line">        //创建ResponseBody转换器 ResponseBody -&gt; ?</div><div class="line">        public Converter&lt;ResponseBody,?&gt; responseBodyConverter(</div><div class="line">                Type type, Annotation[] annotations, Retrofit retrofit)&#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //创建RequestBody转换器 ? -&gt; RequestBody</div><div class="line">        public Converter&lt;?, RequestBody&gt; requestBodyConverter(</div><div class="line">                Type type,Annotation[] parameterAnnotations,Retrofit retrofit)&#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //创建String转换器  ? -&gt; String</div><div class="line">        public Converter&lt;?,String&gt; stringConverter(Type iterableType, Annotation[] parameterAnnotations, Retrofit retrofit)&#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>CallAdapter.Factory</strong></li>
</ul>
<p>　　这个工厂是用来生产CallAdpter，CallAdapter是将一个Call适配给另外一个Call的适配器接口。这个Call就是用来真正调起和发送网络请求，并接受请求回调的。所以我们可以按照特定的需求（如：回调处理什么的…）去自定义这个Call，并通过CallAdapter中adpte方法去适配。再通过CallAdapter.Factory去创建CallAdapter，从而满足需求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public interface CallAdapter&lt;R,T&gt; &#123;</div><div class="line">    Type responseType();</div><div class="line"></div><div class="line">    T adapt(Call&lt;R&gt; call);</div><div class="line"></div><div class="line">    abstract class Factory&#123;</div><div class="line">        public abstract CallAdapter&lt;?,?&gt; get(Type returnType,</div><div class="line">                                             Annotation[] annotations,</div><div class="line">                                             Retrofit retrofit);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　所以，如果我们想要按需求的制定Call，并且能够在Retrofit中起作用需要经过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、自定义CustomCall</div><div class="line">2、自定义CustomCallAdapter，通过adpte方法返回自定义CustomCall</div><div class="line">3、自定义CustomCallAdapterFactory，通过get方法返回自定义CustomCallAdapter</div></pre></td></tr></table></figure></p>
<h5 id="（3）Retrofit类中核心方法create"><a href="#（3）Retrofit类中核心方法create" class="headerlink" title="（3）Retrofit类中核心方法create();"></a>（3）Retrofit类中核心方法create();</h5><p>　　经过上面我们只是建造了一个大的工厂（包含了两个重要车间：ConverterFactory、CallAdapterFactory），并且生产了Retrofit。<br>　　那么我们生产的Retrofit，它又是怎样将<strong>原材料（定义的API接口）</strong>转换成<strong>产品（网络请求结果）</strong>的呢？答案就是Retrofit类中的<strong>create()</strong>方法。<br>　　贴出代码：<br><em>（如果你选择去看源码可能与这个略有不同，因为这是本人改编的代码）</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(&quot;unchecked&quot;)//解决代理创建对象时，泛型未检查统一问题</div><div class="line">public &lt;T&gt; T create(final Class&lt;T&gt; apiService)&#123;</div><div class="line">    if (!apiService.isInterface())</div><div class="line">        throw new IllegalArgumentException(&quot;API的定义必须是接口形式&quot;);</div><div class="line">    if (apiService.getInterfaces().length &gt; 0)</div><div class="line">        throw new IllegalArgumentException(&quot;API的定义不允许继承&quot;);</div><div class="line"></div><div class="line">    LogUtils.log(&quot;5、Retrofit中提供create()方法，通过动态代理方式，创建API接口对象&quot;);</div><div class="line"></div><div class="line">    return (T) Proxy.newProxyInstance(</div><div class="line">            apiService.getClassLoader(),</div><div class="line">            new Class&lt;?&gt;[]&#123;apiService&#125;,</div><div class="line">            new InvocationHandler() &#123;</div><div class="line">            private final Platform platform = Platform.get();</div><div class="line">        @Override</div><div class="line">        public Object invoke(Object o, Method method, Object[] args) throws Throwable &#123;</div><div class="line">            if (method.getDeclaringClass() == Object.class)</div><div class="line">                return method.invoke(this,args);</div><div class="line"></div><div class="line">            //加载处理API接口方法</div><div class="line">            ServiceMethod&lt;Object,Object&gt; serviceMethod =</div><div class="line">                    (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</div><div class="line">            //创建OkHttpCall</div><div class="line">            OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);</div><div class="line"></div><div class="line">            //通过对应的CallAdapter适配自定义并期望返回的Call</div><div class="line">            return serviceMethod.mCallAdapter.adapt(okHttpCall);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　在这个方法中通过加载ServiceMethod（什么玩意？不急，后面会详细说明），进行API接口中的各种注解和参数值的处理。并通过CallAdapter去适配OkHttpCall从而得到自己所期望的Call或者对象。<br>　　现在我们再来看这张图，是不是已经能够很好的梳理逻辑了呢？如果还不可以，那就自己再去翻翻Retrofit这个类的源码看看。<br><img src="http://upload-images.jianshu.io/upload_images/1906608-7643b46a4c41752f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Retrofit简易流程架构图"></p>
<h4 id="2、理解ServiceMethod类"><a href="#2、理解ServiceMethod类" class="headerlink" title="2、理解ServiceMethod类"></a>2、理解ServiceMethod类</h4><p>　　因为原Retrofit中的ServiceMethod相对较复杂，讲解可能会比较复杂且混乱，所以在这里将会主要通过本人自己抽取ServiceMethod来进行讲解（因为我们不再需要再去造这一副轮子了，所以掌握理解即可）。<br>　　在ServiceMethod类中，同样的也是包含了一个内部类Builder，用于构建ServiceMethod，下面我们一起，来一步步揭开这个Builder面纱<em>[斜眼笑]</em>。</p>
<h5 id="（1）ServiceMethod-Builder的构造方法"><a href="#（1）ServiceMethod-Builder的构造方法" class="headerlink" title="（1）ServiceMethod.Builder的构造方法"></a>（1）ServiceMethod.Builder的构造方法</h5><p>　　在这个构造里面我们主要获取Retrofit对象和API接口方法上的注解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Builder(Retrofit retrofit, Method method)&#123;</div><div class="line">    LogUtils.log(&quot;7、初次创建API接口方法处理中心(ServiceMethod)&quot;);</div><div class="line">    //Retrofit实例</div><div class="line">    this.mRetrofit = retrofit;</div><div class="line"></div><div class="line">    //API接口中定义的方法</div><div class="line">    this.mMethod = method;</div><div class="line"></div><div class="line">    //API接口中方法上定义的注解---&gt;@GET</div><div class="line">    this.mMethodAnnotations = method.getAnnotations();</div><div class="line"></div><div class="line">    //API接口中方法中的参数化注解</div><div class="line">    this.mParameterTypes = method.getGenericParameterTypes();</div><div class="line"></div><div class="line">    //API接口中方法中的所有参数注解</div><div class="line">    this.mParameterAnnotationsArray = method.getParameterAnnotations();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="（2）解析构建方法build"><a href="#（2）解析构建方法build" class="headerlink" title="（2）解析构建方法build()"></a>（2）解析构建方法build()</h5><p>　　在该方法中，最主要的：</p>
<blockquote>
<ul>
<li>创建CallAdapter——createCallAdapter()</li>
<li>创建ResponseConverter——createResponseConverter()</li>
<li>解析方法注解，获取请求类型，获取相对URL——parserMethodAnnotation()</li>
<li>解析参数注解，并创建对应ParameterHandler，放入ParameterHandler [ ] 数组中</li>
<li>返回ServiceMethod对象，传入Builder本身对象引用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public ServiceMethod build()&#123;</div><div class="line">            this.mCallAdapter = createCallAdapter();</div><div class="line">            LogUtils.log(&quot;10、获取CallAdapter中适配好的响应类型&quot;);</div><div class="line">            this.mResponseType = mCallAdapter.responseType();</div><div class="line"></div><div class="line">            if (mResponseType == okhttp3.Response.class || mResponseType == Response.class)</div><div class="line">                throw new IllegalStateException(&quot;方法返回类型错误，需要的是ResponseBody&quot;);</div><div class="line"></div><div class="line">            this.mResponseConverter = createResponseConverter();</div><div class="line"></div><div class="line">            for (Annotation annotation:</div><div class="line">                 mMethodAnnotations) &#123;</div><div class="line">                LogUtils.log(&quot;13、解析方法上注解&quot;);</div><div class="line">                parseMethodAnnotation(annotation);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (mMethodType == null)</div><div class="line">                throw new IllegalStateException(&quot;接口方法中必须需要是哪一种请求类型：@GET,@POST...&quot;);</div><div class="line"></div><div class="line">            int parameterCount = mParameterAnnotationsArray.length;</div><div class="line">            LogUtils.log(&quot;16、根据API接口中方法，注解参数的数量，创建对应长度的参数处理器数组&quot;);</div><div class="line">            //根据参数数量，创建对应长度的参数处理器数组。</div><div class="line">            mParameterHandlers = new ParameterHandler&lt;?&gt;[parameterCount];</div><div class="line">            LogUtils.log(&quot;循环遍历注解参数====START&quot;);</div><div class="line">            for (int i = 0; i &lt; parameterCount; i++)&#123;</div><div class="line">                Type parameterType = mParameterTypes[i];</div><div class="line">                Annotation[] parameterAnnotations = mParameterAnnotationsArray[i];</div><div class="line">                mParameterHandlers[i] = parserParameter(i,parameterType,parameterAnnotations);</div><div class="line">            &#125;</div><div class="line">            LogUtils.log(&quot;循环遍历注解参数====END&quot;);</div><div class="line">            return new ServiceMethod&lt;&gt;(this);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>　　对接口方法中参数的解析，其实就是循环遍历所有参数注解，然后获取注解类型，根据不同类型创建不同的ParameterHandler。这里就不帖解析方法了，我相信大家自己去看源码，肯定都是能弄明白的。这里选择带大家一起看一下ParameterHandler这里类。<br>　　对于ParameterHandler这个类的作用，其实就是将一个个的请求参数，添加到网络请求当中去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public abstract class ParameterHandler&lt;T&gt; &#123;</div><div class="line">    /**</div><div class="line">     * 实现方法参数添加的方法</div><div class="line">     */</div><div class="line">    abstract void apply(RequestBuilder builder,T value) throws IOException;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 针对@Query这种参数注解的ParameterHandler</div><div class="line">     * @param &lt;T&gt;</div><div class="line">     */</div><div class="line">    static final class Query&lt;T&gt; extends ParameterHandler&lt;T&gt;&#123;</div><div class="line"></div><div class="line">        private final String mQueryName;</div><div class="line">        private final Converter&lt;T, String&gt; mValueConverter;</div><div class="line">        private final boolean mUrlEncode;</div><div class="line"></div><div class="line">        Query(String name, Converter&lt;T,String&gt; valueConverter, boolean urlEncode)&#123;</div><div class="line">            this.mQueryName = name;</div><div class="line">            this.mValueConverter = valueConverter;</div><div class="line">            this.mUrlEncode = urlEncode;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        void apply(RequestBuilder builder, T value) throws IOException &#123;</div><div class="line">            if (mValueConverter == null) return;</div><div class="line">            //添加请求参数</div><div class="line">         builder.addQueryParams(mQueryName,mValueConverter.convert(value),mUrlEncode);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="（3）拿到ServiceMethod对象后，应该干什么？"><a href="#（3）拿到ServiceMethod对象后，应该干什么？" class="headerlink" title="（3）拿到ServiceMethod对象后，应该干什么？"></a>（3）拿到ServiceMethod对象后，应该干什么？</h5><blockquote>
<ul>
<li>toRequest(Object…args)，将请求中的参数，通过ParameterHandler，添加到请求Request中，并返回Request</li>
<li>toResponse(ResponseBody rawResponseBody)，将原始的OKHttp的响应体，通过Converter转换</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public  ServiceMethod(Builder&lt;R, T&gt; builder) &#123;</div><div class="line">        this.mCallFactory = builder.mRetrofit.mCallFactory;</div><div class="line">        this.mCallAdapter = builder.mCallAdapter;</div><div class="line">        this.mResponseConverter = builder.mResponseConverter;</div><div class="line">        this.mBaseUrl = builder.mRetrofit.mBaseUrl;</div><div class="line">        this.mRelativeUrl = builder.mRelativeUrl;</div><div class="line">        this.mMethod = builder.mMethod;</div><div class="line">        this.mMethodType = builder.mMethodType;</div><div class="line">        this.mParameterHandlers = builder.mParameterHandlers;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Request toRequest(Object... args) throws IOException &#123;</div><div class="line">        RequestBuilder requestBuilder = new RequestBuilder(mMethodType, mBaseUrl, mRelativeUrl);</div><div class="line"></div><div class="line">        @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">        ParameterHandler&lt;Object&gt;[] mParameterHandlers = (ParameterHandler&lt;Object&gt;[]) this.mParameterHandlers;</div><div class="line"></div><div class="line">        int argumentCount = args != null ? args.length : 0;</div><div class="line"></div><div class="line">        if (argumentCount != mParameterHandlers.length)&#123;</div><div class="line">            throw new IllegalStateException(</div><div class="line">                    &quot;待处理参数数量(&quot;+argumentCount+&quot;)与参数处理器数量(&quot;+mParameterHandlers.length+&quot;)不对应&quot;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int i=0;i&lt;argumentCount;i++)&#123;</div><div class="line">            mParameterHandlers[i].apply(requestBuilder,args[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return requestBuilder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R toResponse(ResponseBody rawBody) throws IOException &#123;</div><div class="line">        return mResponseConverter.convert(rawBody);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>　　在这里我们再用一张图来进行说明一下ServiceMethod这个类，帮助大家去理解。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1906608-f4a41cbeac6a20c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Retrofit中ServiceMethod类"></p>
<h4 id="3、再来讲讲OkHttpCall"><a href="#3、再来讲讲OkHttpCall" class="headerlink" title="3、再来讲讲OkHttpCall"></a>3、再来讲讲OkHttpCall</h4><p>　　OkHttpCall其实Retrofit内部封装的类，在OkHttpCall中封装了OkHttp中的Call（用于网络请求的发送或执行）对象。它是Retrofit网络请求发送过程中的实际发送者和网络请求结果回调的第一手接受者。当然也理解为OkHttpCall是Call（OkHttp中的）代理类。<br>　　另外在OkHttpCall中，还做了请求是否发起，是否取消等状态的判读和监听。当然在当前这个抽取的案例中没有体现，可以去实际源码中查看。看明白也是不难的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">public class OkHttpCall&lt;T&gt; implements Call&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    private final ServiceMethod&lt;T, ?&gt; mServiceMethod;</div><div class="line">    private final Object[] mArgs;</div><div class="line">    private okhttp3.Call mRawCall;</div><div class="line"></div><div class="line">    OkHttpCall(ServiceMethod&lt;T,?&gt; serviceMethod, Object [] args)&#123;</div><div class="line">        LogUtils.log(&quot;17、创建OkHttpCall对象&quot;);</div><div class="line">        this.mServiceMethod = serviceMethod;</div><div class="line">        this.mArgs = args;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Response&lt;T&gt; execute() throws IOException &#123;</div><div class="line">        okhttp3.Call call = null;</div><div class="line">        synchronized (this)&#123;</div><div class="line">            call = mRawCall;</div><div class="line">            if (call == null)&#123;</div><div class="line">                call = mRawCall = createRawCall();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LogUtils.log(&quot;18、调用execute，内部调用OkHTTP3.Call的execute()&quot;);</div><div class="line">        return parserResponse(call.execute());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void enqueue(final Callback&lt;T&gt; callback) &#123;</div><div class="line">        okhttp3.Call call = null;</div><div class="line">        synchronized (this)&#123;</div><div class="line">            call = mRawCall;</div><div class="line">            if (call == null)&#123;</div><div class="line">                try &#123;</div><div class="line">                    call = mRawCall = createRawCall();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (call == null)&#123;</div><div class="line">            callback.onFailure(OkHttpCall.this,new Throwable(&quot;不能成功创建请求对象：call == null&quot;));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        LogUtils.log(&quot;18、调用enqueue(带有请求回调监听)，内部调用OkHTTP3.Call的enqueue()&quot;);</div><div class="line">        call.enqueue(new okhttp3.Callback() &#123;</div><div class="line">            @Override</div><div class="line">            public void onFailure(okhttp3.Call call, IOException e) &#123;</div><div class="line">                callback.onFailure(OkHttpCall.this,e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onResponse(okhttp3.Call call, okhttp3.Response response) throws IOException &#123;</div><div class="line">                try &#123;</div><div class="line">                    //给一点点延时感</div><div class="line">                    Thread.sleep(500);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                Response&lt;T&gt; tResponse = parserResponse(response);</div><div class="line">                callback.onResponse(OkHttpCall.this,tResponse);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public synchronized Request request()throws IOException &#123;</div><div class="line">        okhttp3.Call call = mRawCall;</div><div class="line">        if (call != null)&#123;</div><div class="line">            return call.request();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return (mRawCall = createRawCall()).request();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Response&lt;T&gt; parserResponse(okhttp3.Response rawResponse) throws IOException &#123;</div><div class="line">        ResponseBody rawBody = rawResponse.body();</div><div class="line">        int code = rawResponse.code();</div><div class="line">        if (code &lt; 200 || code &gt;= 300) &#123;</div><div class="line">            try &#123;</div><div class="line">                // Buffer the entire body to avoid future I/O.</div><div class="line">                ResponseBody bufferedBody = Utils.buffer(rawBody);</div><div class="line">                return Response.error(bufferedBody, rawResponse);</div><div class="line">            &#125; finally &#123;</div><div class="line">                rawBody.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (code == 204 || code == 205) &#123;</div><div class="line">            rawBody.close();</div><div class="line">            return Response.success(null, rawResponse);</div><div class="line">        &#125;</div><div class="line">        LogUtils.log(&quot;19、调用ServiceMethod.toResponse()，将OkHttp.ResponseBody转换成期望的对象类&quot;);</div><div class="line">        T body = mServiceMethod.toResponse(rawBody);</div><div class="line">        return Response.success(body, rawResponse);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private okhttp3.Call createRawCall() throws IOException &#123;</div><div class="line">        Request request = mServiceMethod.toRequest(mArgs);</div><div class="line">        okhttp3.Call call = mServiceMethod.mCallFactory.newCall(request);</div><div class="line">        if (call == null)</div><div class="line">            throw new NullPointerException(&quot;不能创建请求对象&quot;);</div><div class="line">        return call;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　为了梳理与整理逻辑，现在我们再来一起看一下，一次简单的Retrofit网络请求中的日志输出情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">System.err: ============&gt;0、创建Retrofit中Builder对象</div><div class="line">System.err: ============&gt;1、添加BaseUrl</div><div class="line">System.err: ============&gt;2、添加格式转换工厂</div><div class="line">System.err: ============&gt;3、添加适配工厂</div><div class="line">System.err: ============&gt;4、构建Retrofit对象</div><div class="line">System.err: ============&gt;5、Retrofit中提供create()方法，通过动态代理方式，创建API接口对象</div><div class="line">System.err: ============&gt;6、加载API接口方法处理中心(ServiceMethod)，并缓存(优先加载缓存中)</div><div class="line">System.err: ============&gt;初次做当前API请，创建并缓存</div><div class="line">System.err: ============&gt;7、初次创建API接口方法处理中心(ServiceMethod)</div><div class="line">System.err: ============&gt;8、在ServiceMethod中创建适配器</div><div class="line">System.err: ============&gt;9、通过构建Retrofit添加进来的CallAdapterFactory创建CallAdapter</div><div class="line">System.err: ============&gt;10、获取CallAdapter，适配好的响应类型</div><div class="line">System.err: ============&gt;11、创建请求响应转换器</div><div class="line">System.err: ============&gt;12、通过构建Retrofit添加进来的ConverterFactory，创建请求响应转换器</div><div class="line">System.err: ============&gt;13、解析方法上注解</div><div class="line">System.err: ============&gt;14、判断注解，获取请求类型</div><div class="line">System.err: ============&gt;15、获取相对的URL路径</div><div class="line">System.err: ============&gt;16、根据API接口中方法，注解参数的数量，创建对应长度的参数处理器数组</div><div class="line">System.err: ============&gt;循环遍历注解参数====START</div><div class="line">System.err: ============&gt;&gt;&gt;&gt;&gt;&gt;&gt;根据API接口中方法的每一个注解参数，创建对应的参数处理器</div><div class="line">System.err: ============&gt;&gt;&gt;&gt;&gt;&gt;&gt;判断参数注解类型是Query，创建对应Query参数处理器</div><div class="line">System.err: ============&gt;&gt;&gt;&gt;&gt;&gt;&gt;根据API接口中方法的每一个注解参数，创建对应的参数处理器</div><div class="line">System.err: ============&gt;&gt;&gt;&gt;&gt;&gt;&gt;判断参数注解类型是Query，创建对应Query参数处理器</div><div class="line">System.err: ============&gt;&gt;&gt;&gt;&gt;&gt;&gt;根据API接口中方法的每一个注解参数，创建对应的参数处理器</div><div class="line">System.err: ============&gt;&gt;&gt;&gt;&gt;&gt;&gt;判断参数注解类型是Query，创建对应Query参数处理器</div><div class="line">System.err: ============&gt;循环遍历注解参数====END</div><div class="line">System.err: ============&gt;17、创建OkHttpCall对象</div><div class="line">System.err: ============&gt;18、调用enqueue(带有请求回调监听)，内部调用OkHTTP3.Call的enqueue()</div><div class="line">System.err: ============&gt;19、调用ServiceMethod.toResponse()，将OkHttp.ResponseBody转换成期望的对象类</div><div class="line"></div><div class="line">System.out: ===============&gt;结果：&#123;&quot;status&quot;:201,&quot;message&quot;:&quot;APP被用户自己禁用，请在控制台解禁&quot;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="三、回顾与总结"><a href="#三、回顾与总结" class="headerlink" title="三、回顾与总结"></a>三、回顾与总结</h3><p>　　现在不知道有没有理解Retrofit（翻修，改进）这个单词的意思了呢。其实Retrofit（项目）就一个大的工厂，里面包含了多个工作车间，进行着不同的分工合作。在ConverterFactory中创建着Converter（转换器），在CallAdapterFactory中创建着CallAdapter（Call适配器），在ServiceMethod中调度着API接口中的各种注解并生组装出对应的ParameterHandler，在ParameterHandler中将各种参数值添加到Request（请求）当中去，最后我们通过OkHttpCall调用真正的OkHttp中的Call进行网络请求，并且处理部分部分逻辑，返回结果。<br>　　所以Retrofit真的只是在翻修和改进OkHttp，只需要将原材料（API接口），投入进来，就可以生产出想要的产品（请求结果）。</p>
<p>　　至此，我们整个Retrofit主要东西已经讲完了。现在如果你还处于懵的状态，那我相信你有可能是没有认真看完文章的内容（这是对本人写文章的“蜜汁”自信，我觉得最大原因应该是本人真的没有写好吧）。如果是处于一知半解但是有那么一点思路的话，不着急，如果你愿意的话，你可以选择继续阅读一遍文章。不过更加建议你的是带着这么一点点思路自己去看看一遍Retrofit源码，或者看SimpleRetrofit源码。如果有不懂的话，可以选择再来看看文章里面有没有讲到，或者选择评论区里留言讨论。</p>
<p>　　其实，从<strong>“站在树荫下的后人”</strong>的角度来说Retrofit，其实真的不难，因为他的代码真的不多，设计模式也不复杂（工厂和Builder）。但其实如果是作为<strong>开发者和设计者</strong>，其实真的挺难的。因为Retrofit的扩展性和易用性真的蛮高的，以及一些问题代码的处理思想，如果不经过磨练也确实是很难想到和做到的。所以“骚年”革命尚未成功，同志仍需努力。</p>
<h3 id="结尾PS"><a href="#结尾PS" class="headerlink" title="结尾PS"></a>结尾PS</h3><p>　　其实这篇文章写的很纠结，统共写了三遍，有种想要放弃的念头。因为感觉有些东西特别难阐述清楚，有些地方就是自己能够清楚知道是有什么作用。但是很难组成书面词表达出来（请对我这样的一个“文科生”，投以关怀）。另外，虽然这篇已经写得很长了，但其实Retrofit中还有不少东西我都是没有表达出来的，没有写全的，感觉还是蛮遗憾的。　　<br>　　所以，好几次都想直接录一个视频放出来。因为在视频中可以更好的表达一些东西出来，那些很难表达出来的，直接可以通过“这个傻X东西”，“这玩意”、、、等一些词直接带过去，并且大家也不会歧义，感觉气氛也会好一些^_^。<br>　　另外如果你能够看到这个地方，如果觉得本人解析源码的思路还可以的话，就请给出你想了解的框架或者项目的源码。在评论区里面留言告知。本人尝试看看能不能解析一下。多看别人代码，永远比自己闷头想，进步更大。</p>
<blockquote>
<p>实际代码请下载或者Frok项目，若果能给start那就万分感谢。<br><a href="https://github.com/ms-liu/SimpleRetrofit/tree/master" target="_blank" rel="external">项目——SimpleRetrofit地址：https://github.com/ms-liu/SimpleRetrofit/tree/master</a><br>欢迎大家给出中肯的建议和提高意见，你的鼓励将是我最大的动力。<br>个人邮箱：ms_liu163@163.com</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码解析 </tag>
            
            <tag> 网络请求 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[带你打造一个多Module路由框架]]></title>
      <url>/2017/04/17/MultipleModule/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我过我要的生活<br>不是生活过我就好<br>只要是我想要的<br>期待多久都有情调　　　　　　　　　　　　　　</p>
</blockquote>
<p>开篇推荐一首歌曲，送给一直默默奋斗、坚持，但有时又感到迷茫的你。猛戳<a href="http://music.163.com/#/song?id=25713115" target="_blank" rel="external">《过我的生活》</a></p>
<hr>
<h4 id="项目GitHub地址：https-github-com-ms-liu-AndroidRemoteDemo"><a href="#项目GitHub地址：https-github-com-ms-liu-AndroidRemoteDemo" class="headerlink" title="项目GitHub地址：https://github.com/ms-liu/AndroidRemoteDemo"></a><a href="https://github.com/ms-liu/AndroidRemoteDemo" target="_blank" rel="external">项目GitHub地址：https://github.com/ms-liu/AndroidRemoteDemo</a></h4><h4 id="一、项目为什么要分成多Module"><a href="#一、项目为什么要分成多Module" class="headerlink" title="一、项目为什么要分成多Module"></a>一、项目为什么要分成多Module</h4><p>　　先感受下传统的两种划分模式：业务功能分包、不同组件分包。<br><img src="http://upload-images.jianshu.io/upload_images/1906608-8ff7cc21c396c380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="业务功能划分"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1906608-86bb680556fc1473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不同组件划分"><br> 　　这两种分包都是放在一个App这一个Module里面的。<br>　　每次编译往往都是需要将项目的所有业务都编译一遍，过程繁重。对于单元测试也只是想想就好，因为和普通测试根本没差。另外经常在开发人员之间发生的事情，就是为谁修改了谁的代码而发生互怼事件 <em>[斜眼笑]</em>。<br>　　总体体现：</p>
<blockquote>
<ul>
<li>编译困难</li>
<li>单元测试困难</li>
<li>开发、维护困难</li>
</ul>
</blockquote>
<p>　　因此将项目分成多个Module是很有必要的，这样可以：</p>
<blockquote>
<ul>
<li>提高灵活性——每次只需要编译我们自己想要的Module即可，同时提升编译速度。</li>
<li>方便单元测试——可以轻松的针对每个Module作出单元测试。</li>
<li>让职责分工明确——可以更好的让开发人员去维护各自的模块 </li>
</ul>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1906608-4d089303252615c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多Module划分"></p>
<h4 id="二、解决Module之间页面跳转问题"><a href="#二、解决Module之间页面跳转问题" class="headerlink" title="二、解决Module之间页面跳转问题"></a>二、解决Module之间页面跳转问题</h4><h5 id="1、问题分析"><a href="#1、问题分析" class="headerlink" title="1、问题分析"></a>1、问题分析</h5><p>　　项目被分成多Ｍodule之后，由于项目业务往往是交叉的，所以Module当中包含的页面跳转往往也是相互的。<br>　　为了能够让页面Module之间的页面能够相互跳转，我们往往需要将每个Module之间相互compile，这样无异于又增加了模块之间耦合性，并且还有可能会报出一个循环编译的警告<em>（warning recycle compile）</em></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1906608-9136743793628410.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一般多模块之间关系"></p>
<h5 id="2、问题解决"><a href="#2、问题解决" class="headerlink" title="2、问题解决"></a>2、问题解决</h5><p>　　通过参考Web页面的跳转方式，不难想到的是我们完全可以仿照Web跳转，也先去为每一个Activity注册一个地址，然后，然后…..<em>（PS：然后就没有思路了，MDZZ）</em>。这时看图一张：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1906608-68c040a9e9233950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多Module路由关系"></p>
<p>　　首先去关心每一个需要被其它Module调用的页面，我们将它配置到Common Module中的Remote Configure文件。<br>　　下面我们就是在Remote模块当中编写一些具体Router Operator类。下面我们就需要思考对一个路由地址究竟需要进行怎样的处理了。</p>
<blockquote>
<ul>
<li>我们需要拿到这个地址（注册）——通过put/add方法</li>
<li>我们需要让路由地址生效（调用）——通过invoke方法</li>
</ul>
</blockquote>
<h5 id="3、具体代码编写"><a href="#3、具体代码编写" class="headerlink" title="3、具体代码编写"></a>3、具体代码编写</h5><h6 id="（一）定义操作接口"><a href="#（一）定义操作接口" class="headerlink" title="（一）定义操作接口"></a>（一）定义操作接口</h6><p>核心方法就是put和invoke</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * ==============================================</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 类名：IOperator</div><div class="line"> * &amp;nbsp 基本操作接口</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 作者：M-Liu</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 时间：2017/3/27</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 邮箱：ms_liu163@163.com</div><div class="line"> * &lt;p&gt;</div><div class="line"> * ==============================================</div><div class="line"> */</div><div class="line"></div><div class="line">public interface IOperator&lt;T,K&gt; &#123;</div><div class="line">    /**</div><div class="line">     * 添加路由地址</div><div class="line">     * @param uri 路由地址</div><div class="line">     * @param clazz 路由类型</div><div class="line">     */</div><div class="line">    void put(String uri,Class&lt;T&gt; clazz);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 执行路由路线</div><div class="line">     * @param context Context</div><div class="line">     * @param uri 路由地址</div><div class="line">     * @return &#123;@link BaseIntentOperator#invoke(Context, String)&#125;</div><div class="line">     */</div><div class="line">    K invoke(Context context,String uri);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 检查当前路由路线 是否存在</div><div class="line">     * @param uri 路由地址</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    boolean check(String uri);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="（二）基础实现类"><a href="#（二）基础实现类" class="headerlink" title="（二）基础实现类"></a>（二）基础实现类</h6><p>因为是Demo讲解，所以只是针对Intent这一种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * ==============================================</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 类名：BaseIntentOperator</div><div class="line"> * &amp;nbsp 返回类型是Intent的基础操作类</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 作者：M-Liu</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 时间：2017/3/27</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 邮箱：ms_liu163@163.com</div><div class="line"> * &lt;p&gt;</div><div class="line"> * ==============================================</div><div class="line"> */</div><div class="line"></div><div class="line">public abstract class BaseIntentOperator&lt;T&gt; implements IOperator&lt;T,Intent&gt; &#123;</div><div class="line">    private HashMap&lt;String,Class&lt;T&gt;&gt; mIntentContainer;</div><div class="line">    public BaseIntentOperator()&#123;</div><div class="line">        mIntentContainer = new LinkedHashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * &#123;@inheritDoc&#125;</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void put(String uri, Class&lt;T&gt; clazz) &#123;</div><div class="line">        if (mIntentContainer != null)&#123;</div><div class="line">            mIntentContainer.put(uri,clazz);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * &#123;@inheritDoc&#125;</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public Intent invoke(Context context, String uri) &#123;</div><div class="line">        Class&lt;T&gt; clazz = null;</div><div class="line">        if (check(uri))&#123;</div><div class="line">            clazz = mIntentContainer.get(uri);</div><div class="line">        &#125;</div><div class="line">        if (clazz == null)&#123;</div><div class="line">            throwException(uri);</div><div class="line">        &#125;</div><div class="line">        return new Intent(context,clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void throwException(String uri);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * &#123;@inheritDoc&#125;</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public boolean check(String uri) &#123;</div><div class="line">        return mIntentContainer != null &amp;&amp; mIntentContainer.keySet().contains(uri);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="（三）具体Activity这种处理"><a href="#（三）具体Activity这种处理" class="headerlink" title="（三）具体Activity这种处理"></a>（三）具体Activity这种处理</h6><p>　　当中定义了PROTOCOL 常量，相当于Http这种协议，在Demo中是预留，因为没有处理Service等其它组件的情况，所以没有用到。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * ==============================================</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 类名：ActivityIntentOperator</div><div class="line"> * &amp;nbsp 针对Activity路由操作</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 作者：M-Liu</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 时间：2017/3/28</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 邮箱：ms_liu163@163.com</div><div class="line"> * &lt;p&gt;</div><div class="line"> * ==============================================</div><div class="line"> */</div><div class="line">public class ActivityIntentOperator extends BaseIntentOperator&lt;AppCompatActivity&gt;</div><div class="line"> &#123;</div><div class="line">    public static final String PROTOCOL = &quot;activity://&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void throwException(String uri) &#123;</div><div class="line">        throw new NotFoundRuleException(ActivityIntentOperator.class.getCanonicalName(),uri);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="（四）Manager管理者编写"><a href="#（四）Manager管理者编写" class="headerlink" title="（四）Manager管理者编写"></a>（四）Manager管理者编写</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">public class RemoteOperatorManager &#123;</div><div class="line"></div><div class="line">    private static RemoteOperatorManager mRemoteManager;</div><div class="line">    //路由操作管理池</div><div class="line">    private HashMap&lt;String,IOperator&gt; mOperatorPool;</div><div class="line">    private RemoteOperatorManager()&#123;</div><div class="line">        mOperatorPool = new LinkedHashMap&lt;&gt;();</div><div class="line">        putDefaultOperator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //初始化默认路由操作</div><div class="line">    private void putDefaultOperator() &#123;</div><div class="line">        if (mOperatorPool != null)&#123;</div><div class="line">            mOperatorPool.put(ActivityIntentOperator.PROTOCOL,new ActivityIntentOperator());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取RemoteOperatorManager</div><div class="line">     * @return RemoteOperatorManager</div><div class="line">     */</div><div class="line">    public static RemoteOperatorManager get()&#123;</div><div class="line">        if (mRemoteManager == null)&#123;</div><div class="line">            synchronized (RemoteOperatorManager.class)&#123;</div><div class="line">                mRemoteManager = new RemoteOperatorManager();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mRemoteManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 添加自定义 路由操作</div><div class="line">     * @param protocol 路由协议 &#123;@link ActivityIntentOperator#PROTOCOL&#125;</div><div class="line">     * @param operator 具体操作类</div><div class="line">     */</div><div class="line">    public RemoteOperatorManager putCustomOperator(String protocol,IOperator operator)&#123;</div><div class="line">        if (mOperatorPool != null)&#123;</div><div class="line">            mOperatorPool.put(protocol,operator);</div><div class="line">        &#125;</div><div class="line">        return mRemoteManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 检查当前路由操作 是否存在</div><div class="line">     * @param  uri 路由地址</div><div class="line">     * @return false 不存在 true 存在</div><div class="line">     */</div><div class="line">    public boolean checkOperatorForURI(String uri)&#123;</div><div class="line">        if (!TextUtils.isEmpty(uri))&#123;</div><div class="line">            IOperator&lt;?, ?&gt; operator = getOperator(uri);</div><div class="line">            if (operator == null)&#123;</div><div class="line">                throw new NotFoundRuleException(uri);</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125;else &#123;</div><div class="line">            throw new NotFountRemotePathException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean checkOpratorForProtocol(String protocol)&#123;</div><div class="line">        return mOperatorPool != null &amp;&amp; mOperatorPool.keySet().contains(protocol);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据Uri获取路由操作类</div><div class="line">     * @param uri 路由地址</div><div class="line">     */</div><div class="line">    public  &lt;T,V&gt; IOperator&lt;T,V&gt; getOperator(String uri)&#123;</div><div class="line">        IOperator&lt;T,V&gt; operator = null;</div><div class="line">        if (mOperatorPool != null)&#123;</div><div class="line">            Set&lt;String&gt; protocols = mOperatorPool.keySet();</div><div class="line">            for (String protocol :</div><div class="line">                    protocols) &#123;</div><div class="line">                if (uri.startsWith(protocol))&#123;</div><div class="line">                    operator = mOperatorPool.get(protocol);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return operator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;T&gt; RemoteOperatorManager putRemoteUri(String uri, Class&lt;T&gt; clazz) &#123;</div><div class="line">        if (checkOperatorForURI(uri))&#123;</div><div class="line">            IOperator&lt;T, ?&gt; operator = getOperator(uri);</div><div class="line">            operator.put(uri,clazz);</div><div class="line">        &#125;</div><div class="line">        return mRemoteManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="（五）代言者——Remote编写"><a href="#（五）代言者——Remote编写" class="headerlink" title="（五）代言者——Remote编写"></a>（五）代言者——Remote编写</h6><p>为什么是代言者，是因为其实每一个具体方法都是由Manager去完成的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class Remote &#123;</div><div class="line"></div><div class="line">    private final static String PATTERN = &quot;&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 添加自定义路由操作</div><div class="line">     * @param protocol 路由协议</div><div class="line">     * @param operator 路由操作类</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static RemoteOperatorManager putCoustomOprator(String protocol, IOperator operator)&#123;</div><div class="line">        return RemoteOperatorManager.get().putCustomOperator(protocol,operator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 添加路由地址</div><div class="line">     * @param uri 路由地址</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static&lt;T&gt; RemoteOperatorManager putRemoteUri(String uri,Class&lt;T&gt; clazz)&#123;</div><div class="line">        return RemoteOperatorManager.get().putRemoteUri(uri,clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 启用路由地址</div><div class="line">     * @param ctx Context</div><div class="line">     * @param uri 路由地址</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static &lt;V&gt; V invoke(Context ctx, String uri)&#123;</div><div class="line">        if (checkUri(uri))&#123;</div><div class="line">            IOperator&lt;?, V&gt; operator = RemoteOperatorManager.get().getOperator(uri);</div><div class="line">            return operator.invoke(ctx,uri);</div><div class="line">        &#125;else &#123;</div><div class="line">            throw new NotFoundRuleException(uri);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 路由地址检查</div><div class="line">     * @param uri 路由地址</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static boolean checkUri(String uri)&#123;</div><div class="line">        return RemoteOperatorManager.get().checkOperatorForURI(uri);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="（六）测试"><a href="#（六）测试" class="headerlink" title="（六）测试"></a>（六）测试</h6><ul>
<li><p>在Application中添加、注册路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class RemoteApp extends Application &#123;</div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        initRemote();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initRemote() &#123;</div><div class="line">        Remote.putRemoteUri(ActivityIntentOperator.PROTOCOL+ IRemoteUrlConfig.LOGIN_REMOTE_URL, LoginActivity.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在MainActivity中调用，并执行跳转</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent invoke = Remote.invoke(MainActivity.this, ActivityIntentOperator.PROTOCOL + IRemoteUrlConfig.LOGIN_REMOTE_URL);</div><div class="line"> startActivity(invoke);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　至此，我们已经完成了一个路由框架，已经可以解决多Module之间，页面跳转问题。</p>
<hr>
<hr>
<hr>
<h4 id="（三）拔高与提升"><a href="#（三）拔高与提升" class="headerlink" title="（三）拔高与提升"></a>（三）拔高与提升</h4><p>　　如果已经消化完上面内容，那么就可以再跟随我们做一些拔高与提升了。<br>　　下面我们将会使整个框架提升到通过注解Annotation的形式，来完成所有的工作，达到简化使用的目的。</p>
<h5 id="１、创建RemoteAnnotation-Module"><a href="#１、创建RemoteAnnotation-Module" class="headerlink" title="１、创建RemoteAnnotation Module"></a>１、创建RemoteAnnotation Module</h5><ul>
<li>创建注解@Module——指明当前页面所在Module<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType.TYPE)</div><div class="line">@Retention(RetentionPolicy.CLASS)</div><div class="line">public @interface Module &#123;</div><div class="line">    String value()default &quot;&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>创建注解@Modules——指明当前有多少个Module<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType.TYPE)</div><div class="line">@Retention(RetentionPolicy.CLASS)</div><div class="line">public @interface Modules &#123;</div><div class="line">    String[]value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="2、创建RemoteCompiler-Module"><a href="#2、创建RemoteCompiler-Module" class="headerlink" title="2、创建RemoteCompiler Module"></a>2、创建RemoteCompiler Module</h5><ul>
<li>创建配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Config &#123;</div><div class="line">    public static final String PACKAGE_NAME = &quot;com.mmyz.router&quot;;</div><div class="line">    public static final String PAGE_PREFIX = &quot;Module_&quot;;</div><div class="line">    public static final String CLASS_NAME = &quot;AutoRegisterRemote&quot;;</div><div class="line">    public static final String METHOD_NAME = &quot;autoRegister&quot;;</div><div class="line">    public static final String PAGE_METHOD_NAME = &quot;autoInvoke&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>创建RemoteProcessor——注解处理类<br>对此处不太了解的可以移步到 <a href="http://hannesdorfmann.com/annotation-processing/annotationprocessing101" target="_blank" rel="external">http://hannesdorfmann.com/annotation-processing/annotationprocessing101</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div></pre></td><td class="code"><pre><div class="line">@AutoService(Processor.class)</div><div class="line">public class RemoteProcessor extends AbstractProcessor &#123;</div><div class="line"></div><div class="line">    private Filer mFiler;</div><div class="line">    private Messager mMessager;</div><div class="line"></div><div class="line">    private List&lt;String&gt; mStaticRemoteUriList = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public synchronized void init(ProcessingEnvironment processingEnvironment) &#123;</div><div class="line">        super.init(processingEnvironment);</div><div class="line">        //文件操作</div><div class="line">        mFiler = processingEnvironment.getFiler();</div><div class="line">        //消息输出</div><div class="line">        mMessager = processingEnvironment.getMessager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 当前java 源码版本</div><div class="line">     * java compiler version</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public SourceVersion getSupportedSourceVersion() &#123;</div><div class="line">        return SourceVersion.latest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 指明需要关心的注解</div><div class="line">     * need handle Annotation type</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public Set&lt;String&gt; getSupportedAnnotationTypes() &#123;</div><div class="line">        Set&lt;String&gt; types = new HashSet&lt;&gt;();</div><div class="line">        types.add(Modules.class.getCanonicalName());</div><div class="line">        types.add(Module.class.getCanonicalName());</div><div class="line">        types.add(StaticRemote.class.getCanonicalName());</div><div class="line">        return types;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 具体处理</div><div class="line">     * @param set</div><div class="line">     * @param re</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public boolean process(Set&lt;? extends TypeElement&gt; set, RoundEnvironment re) &#123;</div><div class="line">        //清除URL维护集合</div><div class="line">        mStaticRemoteUriList.clear();</div><div class="line">        try &#123;</div><div class="line">            Set&lt;? extends Element&gt; modules = re.getElementsAnnotatedWith(Modules.class);</div><div class="line">            if (modules != null &amp;&amp; !modules.isEmpty())&#123;</div><div class="line">                patchModulesClass(modules);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">            processModule(re);</div><div class="line"></div><div class="line">        &#125;catch (Exception e)&#123;</div><div class="line">            mMessager.printMessage(Diagnostic.Kind.NOTE,e.getMessage());</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void processModule(RoundEnvironment re) &#123;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            Set&lt;? extends Element&gt; staticElementSet = re.getElementsAnnotatedWith(StaticRemote.class);</div><div class="line">            if (staticElementSet != null &amp;&amp; !staticElementSet.isEmpty()) &#123;</div><div class="line">                for (Element e :</div><div class="line">                        staticElementSet) &#123;</div><div class="line">                    if (!(e instanceof TypeElement)) &#123;</div><div class="line">                        continue;</div><div class="line">                    &#125;</div><div class="line">                    TypeElement te = (TypeElement) e;</div><div class="line">                    mStaticRemoteUriList.add(te.getAnnotation(StaticRemote.class).value());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Set&lt;? extends Element&gt; module = re.getElementsAnnotatedWith(Module.class);</div><div class="line"></div><div class="line">            patchModuleClass(module);</div><div class="line">        &#125;catch (Exception e) &#123;</div><div class="line">            mMessager.printMessage(Diagnostic.Kind.NOTE,e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建class文件</div><div class="line">     * create class</div><div class="line">     *</div><div class="line">     *  package com.mmyz.router;</div><div class="line">     *</div><div class="line">     *  public class Page_Login()&#123;</div><div class="line">     *      public static autoInvoke()&#123;</div><div class="line">     *          Remote.putRemoteUriDefaultPattern(&quot;activity://com.mmyz.account.LoginActivity&quot;);</div><div class="line">     *      &#125;</div><div class="line">     *  &#125;</div><div class="line">     *</div><div class="line">     */</div><div class="line">    private void patchModuleClass(Set&lt;? extends Element&gt; module) &#123;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            if (module == null || module.isEmpty())</div><div class="line">                return;</div><div class="line"></div><div class="line">            mMessager.printMessage(Diagnostic.Kind.NOTE,module.toString());</div><div class="line">            Element next = module.iterator().next();</div><div class="line">            Module annotation = next.getAnnotation(Module.class);</div><div class="line"></div><div class="line">            String pageName = annotation.value();</div><div class="line">            String className = Config.PAGE_PREFIX+pageName;</div><div class="line"></div><div class="line">            JavaFileObject file = mFiler.createSourceFile(className, next);</div><div class="line"></div><div class="line">            PrintWriter printWriter = new PrintWriter(file.openWriter());</div><div class="line">            printWriter.println(&quot;package &quot;+ Config.PACKAGE_NAME +&quot;;&quot;);</div><div class="line">            printWriter.println(&quot;import &quot;+ Config.PACKAGE_NAME+&quot;.Remote;&quot;);</div><div class="line">            printWriter.println(&quot;import &quot;+ Config.PACKAGE_NAME+&quot;.exception.NotFoundClassException;&quot;);</div><div class="line">            printWriter.println(&quot;public class &quot;+className +&quot; &#123;&quot;);</div><div class="line">            printWriter.println(&quot;public static void &quot;+ Config.PAGE_METHOD_NAME+&quot;()&#123;&quot;);</div><div class="line"></div><div class="line">            printWriter.println(&quot;try&#123;&quot;);</div><div class="line">            for (String uri :</div><div class="line">                    mStaticRemoteUriList) &#123;</div><div class="line">                printWriter.println(&quot;Remote.putRemoteUriDefaultPattern(\&quot;&quot;+uri+&quot;\&quot;);&quot;);</div><div class="line">            &#125;</div><div class="line">            printWriter.println(&quot;&#125;catch(NotFoundClassException e)&#123;&quot;);</div><div class="line">            printWriter.println(&quot;e.printStackTrace();&quot;);</div><div class="line">            printWriter.println(&quot;&#125;&quot;);</div><div class="line">            printWriter.println(&quot;&#125;&quot;);</div><div class="line">            printWriter.println(&quot;&#125;&quot;);</div><div class="line">            printWriter.flush();</div><div class="line">            printWriter.close();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建class文件</div><div class="line">     * Create class</div><div class="line">     *</div><div class="line">     *    package com.mmyz.remote;</div><div class="line">     *    public class AutoRegisterRemote&#123;</div><div class="line">     *        public void autoRegister()&#123;</div><div class="line">     *            Page_Login.autoInvoke();</div><div class="line">     *        &#125;</div><div class="line">     *    &#125;</div><div class="line">     */</div><div class="line">    private void patchModulesClass(Set&lt;? extends Element&gt; modules) &#123;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            TypeElement moduleTypeElement= (TypeElement) modules.iterator().next();</div><div class="line">            JavaFileObject file = mFiler.createSourceFile(Config.CLASS_NAME, moduleTypeElement);</div><div class="line">            PrintWriter writer = new PrintWriter(file.openWriter());</div><div class="line">            writer.println(&quot;package &quot;+ Config.PACKAGE_NAME+&quot;;&quot;);</div><div class="line">            writer.println(&quot;public class &quot;+ Config.CLASS_NAME +&quot; &#123;&quot;);</div><div class="line">            writer.println(&quot;public static void &quot;+ Config.METHOD_NAME +&quot; () &#123;&quot;);</div><div class="line">            Modules modulesAnnotation = moduleTypeElement.getAnnotation(Modules.class);</div><div class="line">            String[] value = modulesAnnotation.value();</div><div class="line"></div><div class="line">            for (String item :</div><div class="line">                    value) &#123;</div><div class="line">                writer.println(Config.PACKAGE_NAME+&quot;.&quot;+ Config.PAGE_PREFIX+item+&quot;.&quot;+ Config.PAGE_METHOD_NAME +&quot;();&quot;);</div><div class="line">            &#125;</div><div class="line">            writer.println(&quot;&#125;&quot;);</div><div class="line">            writer.println(&quot;&#125;&quot;);</div><div class="line">            writer.flush();</div><div class="line">            writer.close();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            mMessager.printMessage(Diagnostic.Kind.ERROR,e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建反射调用类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class RemoteRegister &#123;</div><div class="line">    public static void register()&#123;</div><div class="line">        try &#123;</div><div class="line">            Class&lt;?&gt; clazz = Class.forName(Config.PACKAGE_NAME + &quot;.&quot; + Config.CLASS_NAME);</div><div class="line">            Method method = clazz.getDeclaredMethod(Config.METHOD_NAME);</div><div class="line">            method.invoke(null);</div><div class="line">        &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (NoSuchMethodException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvocationTargetException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>改进Remote类——添加两个自动处理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 根据默认规则自动解析Uri</div><div class="line"> * @param uri 路由地址 Ac</div><div class="line"> */</div><div class="line">public static RemoteOperatorManager putRemoteUriDefaultPattern(String uri) throws NotFoundClassException &#123;</div><div class="line">    // (activity://com.mmyz.account.LoginActivity)</div><div class="line">    Pattern pattern = Pattern.compile(&quot;[/]+&quot;);</div><div class="line">    String[] infos = pattern.split(uri);</div><div class="line">    String protocol = infos[0];</div><div class="line">    String page = infos[1];</div><div class="line">    try &#123;</div><div class="line">        putRemoteUri(uri,Class.forName(page));</div><div class="line">    &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">        throw new NotFoundClassException(page, uri);</div><div class="line">    &#125;</div><div class="line">    return RemoteOperatorManager.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Activity路由跳转</div><div class="line"> * @param context Context</div><div class="line"> * @param uri 路由地址</div><div class="line"> * @param invokeCallback  调用回调，处理Intent传值</div><div class="line"> */</div><div class="line">public static void startActivity(Context context,String uri,BaseInvokeCallback&lt;Intent&gt; invokeCallback)&#123;</div><div class="line">    Intent intent = invoke(context, uri);</div><div class="line">    intent = invokeCallback.invokeCallback(intent);</div><div class="line">    if (intent != null)&#123;</div><div class="line">        context.startActivity(intent);</div><div class="line">    &#125;else &#123;</div><div class="line">        throw new NotFoundIntentException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="3、具体调用"><a href="#3、具体调用" class="headerlink" title="3、具体调用"></a>3、具体调用</h5><ul>
<li><p>将两个Module编译到每个模块中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//remoteannotation</div><div class="line">compile project(&apos;:remoteannotation&apos;)</div><div class="line">//remote</div><div class="line">compile project(&apos;:remote&apos;)</div><div class="line">//compiler</div><div class="line">compile project(&apos;:remotecompiler&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>在App模块的Application中调用注册</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Modules(&#123;</div><div class="line">          RemoteModuleConfig.ACCOUNT_MODULE,</div><div class="line">          RemoteModuleConfig.PRODUCT_MODULE,</div><div class="line">          RemoteModuleConfig.ORDER_MODULE&#125;)</div><div class="line">public class RemoteApp extends Application &#123;</div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        initRemote();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initRemote() &#123;</div><div class="line">//        Remote.putRemoteUri(ActivityIntentOperator.PROTOCOL+ IRemoteUrlConfig.LOGIN_REMOTE_URL, LoginActivity.class);</div><div class="line">        RemoteRegister.register();</div><div class="line">//        try &#123;</div><div class="line">//            Remote.putRemoteUriDefaultPattern(ActivityIntentOperator.PROTOCOL+ LoginActivity.REMOTE_URL);</div><div class="line">//        &#125; catch (NotFoundClassException e) &#123;</div><div class="line">//            Log.e(&quot;=========&quot;,e.getMessage());</div><div class="line">//            e.printStackTrace();</div><div class="line">//        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在被需要的页面添加@Module和@StaticRemote注解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Module(RemoteModuleConfig.ACCOUNT_MODULE)</div><div class="line">@StaticRemote(ActivityIntentOperator.PROTOCOL+ RemoteUrlConfig.REGISTER_REMOTE_URL)</div><div class="line">public class RegisterActivity extends AppCompatActivity &#123;</div></pre></td></tr></table></figure>
</li>
<li><p>调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">btnProduct.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        Remote.startActivity(</div><div class="line">                MainActivity.this,</div><div class="line">                ActivityIntentOperator.PROTOCOL + RemoteUrlConfig.PRODUCT_REMOTE_URL,</div><div class="line">                new BaseInvokeCallback&lt;Intent&gt;());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>　　通过多Module的划分，可以很好解决多人协作开发中代码冲突问题。另外通过路由方式是也可以很好的解决在采用多Module划分后，页面之间的跳转问题，同时让页面跳转逻辑更加清晰。所以相对来说本人还是比较推崇，因为无论是<strong>解耦程度</strong>，<strong>可扩展性</strong>，<strong>可维护性</strong>都得到了极大的<strong>提升</strong>。使用和学习成本都不高。当然目前这个是Demo项目用于讲解，如果真的想开发实际项目还需进一步完善，或者去搜集大手写的路由框架</p>
<h4 id="实际代码请下载或者Frok项目。"><a href="#实际代码请下载或者Frok项目。" class="headerlink" title="实际代码请下载或者Frok项目。"></a>实际代码请下载或者Frok项目。</h4><h4 id="项目GitHub地址：https-github-com-ms-liu-AndroidRemoteDemo-1"><a href="#项目GitHub地址：https-github-com-ms-liu-AndroidRemoteDemo-1" class="headerlink" title="项目GitHub地址：https://github.com/ms-liu/AndroidRemoteDemo"></a><a href="https://github.com/ms-liu/AndroidRemoteDemo" target="_blank" rel="external">项目GitHub地址：https://github.com/ms-liu/AndroidRemoteDemo</a></h4><h4 id="欢迎大家给出中肯的建议和提高意见，你的鼓励将是我最大的动力。"><a href="#欢迎大家给出中肯的建议和提高意见，你的鼓励将是我最大的动力。" class="headerlink" title="欢迎大家给出中肯的建议和提高意见，你的鼓励将是我最大的动力。"></a>欢迎大家给出中肯的建议和提高意见，你的鼓励将是我最大的动力。</h4><h4 id="个人邮箱：ms-liu163-163-com"><a href="#个人邮箱：ms-liu163-163-com" class="headerlink" title="个人邮箱：ms_liu163@163.com"></a>个人邮箱：ms_liu163@163.com</h4>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Router </tag>
            
            <tag> 提升开发效率 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[带你写一个不一样的MVP开发框架]]></title>
      <url>/2017/04/10/DiffrentMvpFrame/</url>
      <content type="html"><![CDATA[<blockquote>
<p>与孤独为伴，让自己来一场涅槃</p>
</blockquote>
<h4 id="项目GitHub地址：https-github-com-ms-liu-ProjectFrameDemo"><a href="#项目GitHub地址：https-github-com-ms-liu-ProjectFrameDemo" class="headerlink" title="项目GitHub地址：https://github.com/ms-liu/ProjectFrameDemo"></a><a href="https://github.com/ms-liu/ProjectFrameDemo" target="_blank" rel="external">项目GitHub地址：https://github.com/ms-liu/ProjectFrameDemo</a></h4><h3 id="一、了解"><a href="#一、了解" class="headerlink" title="一、了解"></a>一、了解</h3><p>  在传统的Android项目开发过程中，按照MVC模块划分的话，往往会发现其实并不能很好的划分出各自的职责出来，Activity有时既需要扮演C的角色还需要扮演V的角色。这就导致Activity中代码耦合现象严重，尤其对于某些业务逻辑相对复杂的页面，动不动就是上千行的代码。<br>  可能对于这些页面一代开发人员来说还能很愉快的接受，但是当新人来维护时，这就会让他很头痛了；<br>  <em>“他在写些什么? （黑人问号 黑人问号）他应该是个大神，代码我都看不懂，我要好好研究研究！”</em><br>  在这种现象的基础上，便有了MVP的开发模式：</p>
<ul>
<li><strong>M</strong>odel：数据层——业务逻辑和实体类</li>
<li><strong>V</strong>iew：视图层——页面展示</li>
<li><strong>P</strong>resenter：逻辑层——数据和视图层交互</li>
</ul>
<p>  单单从目前的分析来看，MVP和MVC并没有什么大的区别，当然这两者本身本质上的区别不大，都是用作解耦V和M，只是将MVC套到Android开发过程中的时候，让Activity等一些组件，角色扮演不是那么清晰，所以导致了问题产生。<br>  而在MVP的模式中，将Activity这些组件完全当成View层，让Activity职责单一化。Presenter负责数据处理，然后通过接口的形式达到与View交互的目的。让View和Model不在有交集。<br><img src="http://upload-images.jianshu.io/upload_images/1906608-25177768f24d1f3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVP结构"><br>  这篇文章不作MVP如何编写的讲解，如需了解可自行百度，另外项目里面也包含了MVP 编写代码。</p>
<h3 id="二、提升与改进（重点与目的）"><a href="#二、提升与改进（重点与目的）" class="headerlink" title="二、提升与改进（重点与目的）"></a>二、提升与改进（<em>重点与目的</em>）</h3><p>  其实有过了解或者使用MVP的开发人员，应当都能体会感受到，MVP确实能够将Activity中代码简化。但是对于那些业务复杂界面，Presenter中代码也是会急剧增多，并且有时也会将View层中代码放到Presenter中，重新回到老状态。<br>  另外不知道有没有人碰到和我一样的问题，就是在使用MVP的过程中，有时在打开多个Activity页面后，回退过程中，在某些使用Fragment的Activity中会报出<strong>NullPointException</strong>，这是因为在我们打开过多页面时，由于内存和生命周期管理导致Fragment被系统回收，但是我们并没有将这些告知Presenter，从而发生<strong>NullPointException</strong>。<br>  下面我们就一起来解决，这些问题。</p>
<h4 id="（一）框架分析"><a href="#（一）框架分析" class="headerlink" title="（一）框架分析"></a>（一）框架分析</h4><p><img src="http://upload-images.jianshu.io/upload_images/1906608-722a7bf02694b365.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVPP结构"><br>  在该框架中，我们在V和P之间加上了一个Proxy或Controller代理类，我们将会尽量少的让P和V直接进行交互接触，而是通过Proxy与V进行交互，在Proxy中预先处理部分逻辑，从而达到减轻Presenter职责的目的，让Presenter中代码更加简洁，更加专注于业务处理逻辑。</p>
<h4 id="（二）Code"><a href="#（二）Code" class="headerlink" title="（二）Code"></a>（二）Code</h4><p><img src="http://upload-images.jianshu.io/upload_images/1906608-d775140991d6d764.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码分包展示"></p>
<p>1、Model层</p>
<ul>
<li><p>定义IModel数据接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface IModel&lt;T&gt; &#123;</div><div class="line">    void setModel(T t);</div><div class="line">    T getModel();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现IModel接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ImproveModelImpl implements IModel&lt;ImproveInfoBean&gt;&#123;</div><div class="line">    private ImproveInfoBean mModel;</div><div class="line">    @Override</div><div class="line">    public void setModel(ImproveInfoBean improveInfoBean) &#123;</div><div class="line">        this.mModel = improveInfoBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ImproveInfoBean getModel() &#123;</div><div class="line">        if (this.mModel == null)&#123;</div><div class="line">            this.mModel = new ImproveInfoBean();</div><div class="line">        &#125;</div><div class="line">        return mModel;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>2、View层代码</p>
<ul>
<li><p>定义View生命周期监听接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public interface OnViewStateListener &#123;</div><div class="line"></div><div class="line">    void onCreate();</div><div class="line"></div><div class="line">    void onPause();</div><div class="line"></div><div class="line">    void onResume();</div><div class="line"></div><div class="line">    void onStop();</div><div class="line"></div><div class="line">    void onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义公共IView接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public interface IView &#123;</div><div class="line">    // 绑定对View生命周期监听</div><div class="line">    void bindListener(OnViewStateListener listener);</div><div class="line"></div><div class="line">    Context getContext();</div><div class="line"></div><div class="line">     // Toast提示</div><div class="line">    void showToast(String message);</div><div class="line"></div><div class="line">     //显示加载对话框</div><div class="line">    void showLoadingDialog(String message);</div><div class="line"></div><div class="line">    // 隐藏加载对话框</div><div class="line">    void hideLoadingDialog();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写ViewDelegate<br>对 View操作的委托类，实现IView和OnViewStateListener接口中的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">public class ViewDelegate implements IView,OnViewStateListener &#123;</div><div class="line"></div><div class="line">    private Context mCtx;</div><div class="line">    private ProgressDialog mProgressDialog;</div><div class="line"></div><div class="line">    public ViewDelegate(Context context)&#123;</div><div class="line">        this.mCtx = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private List&lt;OnViewStateListener&gt; mOnViewStateListeners ;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void bindListener(OnViewStateListener listener) &#123;</div><div class="line">        //用数组管理每一个View的生命周期，避免一个页面有多个监听</div><div class="line">        if (mOnViewStateListeners == null)&#123;</div><div class="line">            mOnViewStateListeners = new ArrayList&lt;&gt;();</div><div class="line">            mOnViewStateListeners.add(listener);</div><div class="line">        &#125;else &#123;</div><div class="line">            if (!mOnViewStateListeners.contains(listener))&#123;</div><div class="line">                mOnViewStateListeners.add(listener);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Context getContext() &#123;</div><div class="line">        return mCtx;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void showToast(String message) &#123;</div><div class="line">        if (mCtx != null) &#123;</div><div class="line">            Toast.makeText(mCtx, message, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void showLoadingDialog(String message) &#123;</div><div class="line">        if (mCtx != null)&#123;</div><div class="line">            mProgressDialog = new ProgressDialog(mCtx);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void hideLoadingDialog() &#123;</div><div class="line">        if (mProgressDialog != null &amp;&amp; mProgressDialog.isShowing())&#123;</div><div class="line">            mProgressDialog.hide();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //------------------View生命周期管理--------------------------------------------------------</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        if (checkListener())&#123;</div><div class="line">            for (OnViewStateListener listener:</div><div class="line">                 mOnViewStateListeners) &#123;</div><div class="line">                listener.onCreate();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPause() &#123;</div><div class="line">        if (checkListener())&#123;</div><div class="line">            for (OnViewStateListener listener:</div><div class="line">                    mOnViewStateListeners) &#123;</div><div class="line">                listener.onPause();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResume() &#123;</div><div class="line">        if (checkListener())&#123;</div><div class="line">            for (OnViewStateListener listener:</div><div class="line">                    mOnViewStateListeners) &#123;</div><div class="line">                listener.onResume();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStop() &#123;</div><div class="line">        if (checkListener())&#123;</div><div class="line">            for (OnViewStateListener listener:</div><div class="line">                    mOnViewStateListeners) &#123;</div><div class="line">                listener.onStop();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        if (checkListener())&#123;</div><div class="line">            for (OnViewStateListener listener:</div><div class="line">                    mOnViewStateListeners) &#123;</div><div class="line">                listener.onDestroy();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean checkListener()&#123;</div><div class="line">        return mOnViewStateListeners != null &amp;&amp; !mOnViewStateListeners.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写BaseActivity，在里面实现页面公共操作方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class BaseActivity extends AppCompatActivity implements IView&#123;</div><div class="line"></div><div class="line">    private ViewDelegate mDelegate;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        //可以考虑注解创建</div><div class="line">        mDelegate = new ViewDelegate(this);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void bindListener(OnViewStateListener listener) &#123;</div><div class="line">        mDelegate.bindListener(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Context getContext() &#123;</div><div class="line">        return BaseActivity.this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void showToast(String message) &#123;</div><div class="line">        mDelegate.showToast(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void showLoadingDialog(String message) &#123;</div><div class="line">        mDelegate.showLoadingDialog(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void hideLoadingDialog() &#123;</div><div class="line">        mDelegate.hideLoadingDialog();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>3、Presenter层代码</p>
<ul>
<li>IPresenter公共接口，因为要监听View生命周期，让它继承OnViewStateListener 接口<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public interface IImprovePresenter&lt;M,V extends IView&gt; extends OnViewStateListener &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * View绑定</div><div class="line">     * @param v</div><div class="line">     */</div><div class="line">    void bindView(V v);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 数据加载</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    M loadModel();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * View解绑</div><div class="line">     */</div><div class="line">    void detachView();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>编写BasePresenter，实现部分共方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">public abstract class BaseImprovePresenter&lt;M extends IModel,V extends IView&gt; implements IImprovePresenter&lt;M,V&gt; &#123;</div><div class="line"></div><div class="line">    private List&lt;String&gt; mMethods;</div><div class="line"></div><div class="line">    public BaseImprovePresenter()&#123;</div><div class="line">        this.mMethods = new ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPause() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResume() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStop() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    //---------------------模拟需要在生命周期中处理的逻辑--------------------------------------</div><div class="line">    /**</div><div class="line">     * 添加View生命周期结束时，需要结束的方法名称;</div><div class="line">     * 类似RxJava中添加addSubscription()</div><div class="line">     * @param methodName</div><div class="line">     */</div><div class="line">    public void addHandleMethod(String methodName)&#123;</div><div class="line">        if (mMethods != null)&#123;</div><div class="line">            mMethods.add(methodName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 清楚</div><div class="line">     * 类似RxJava中添加clearSubscription()</div><div class="line">     */</div><div class="line">    public void clearMethod()&#123;</div><div class="line">        if (mMethods != null &amp;&amp; !mMethods.isEmpty())&#123;</div><div class="line">            mMethods.clear();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写Presenter，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class ImprovePresenter extends BaseImprovePresenter&lt;ImproveModelImpl,IImproveView&gt; &#123;</div><div class="line"></div><div class="line">    private IImproveView mView;</div><div class="line">    private ImproveModelImpl mModel;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void bindView(IImproveView iImproveView) &#123;</div><div class="line">        this.mView = iImproveView;</div><div class="line">        mModel = loadModel();</div><div class="line">        mView.showExplain(mModel.getModel().explain);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ImproveModelImpl loadModel() &#123;</div><div class="line">        addHandleMethod(&quot;异步请求数据方法&quot;);</div><div class="line">        return new ImproveModelImpl();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void detachView() &#123;</div><div class="line">        clearMethod();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setInfo(String username, String password) &#123;</div><div class="line">        if (mModel != null)&#123;</div><div class="line">            mModel.getModel().setName(username);</div><div class="line">            mModel.getModel().setPassword(password);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void getInfoBean()&#123;</div><div class="line">        mView.showInfo(&quot;用户名：&quot;+mModel.getModel().getName()+&quot;\r\n密码：&quot;+mModel.getModel().getPassword());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写PresenterProxy代理类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">public class ImprovePresenterProxy implements IImprovePresenter&lt;ImproveModelImpl,IImproveView&gt;, View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private ImprovePresenter mPresenter;</div><div class="line">    private EditText etUserName;</div><div class="line">    private EditText etPassword;</div><div class="line">    private TextView componentShowInfo;</div><div class="line">    private TextView componentExplain;</div><div class="line">    private IImproveView mView;</div><div class="line"></div><div class="line">    public ImprovePresenterProxy(ImprovePresenter improvePresenter)&#123;</div><div class="line">        //判空</div><div class="line">        checkPresenter(improvePresenter);</div><div class="line">        //可以考虑依赖注入 方式</div><div class="line">        this.mPresenter = improvePresenter;</div><div class="line">        loadModel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void checkPresenter(ImprovePresenter improvePresenter) &#123;</div><div class="line">        if (improvePresenter == null)&#123;</div><div class="line">            throw new NotBindPresenterException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ImproveModelImpl loadModel() &#123;</div><div class="line">        return mPresenter.loadModel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void bindView(IImproveView iImproveView) &#123;</div><div class="line">        checkView(iImproveView);</div><div class="line">        this.mView = iImproveView;</div><div class="line">        mPresenter.bindView(iImproveView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void checkView(IImproveView iImproveView) &#123;</div><div class="line">        if (iImproveView == null)&#123;</div><div class="line">            throw new NotBindViewException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void detachView() &#123;</div><div class="line">        mPresenter.detachView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        //to do something</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPause() &#123;</div><div class="line">        //to do something</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResume() &#123;</div><div class="line">        //to do something</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStop() &#123;</div><div class="line">        //to do something</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        detachView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View view) &#123;</div><div class="line">        int i = view.getId();</div><div class="line">        if (i == R.id.btn_save) &#123;</div><div class="line">            if (etUserName != null &amp;&amp; etPassword != null)&#123;</div><div class="line">                mView.showToast(&quot;保存成功&quot;);</div><div class="line">                mPresenter.setInfo(etUserName.getText().toString(),etPassword.getText().toString());</div><div class="line">            &#125;</div><div class="line">        &#125; else if (i == R.id.btn_get) &#123;</div><div class="line">            mPresenter.getInfoBean();</div><div class="line">        &#125; else &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setComponentName(EditText etUsername) &#123;</div><div class="line">        this.etUserName = etUsername;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setComponentPassword(EditText etPassword) &#123;</div><div class="line">        this.etPassword = etPassword;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setComponentShowInfo(TextView componentShowInfo) &#123;</div><div class="line">        this.componentShowInfo = componentShowInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setComponentExplain(TextView componentExplain) &#123;</div><div class="line">        this.componentExplain = componentExplain;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  至此，完成对MVP框架的完善和升级，完善后的MVP能够更好的用于实际生产，做到进一步的代码解耦的目的。并且由于加入了对View生命周期的管理，也很好的解决<strong>NullPointException</strong>问题。</p>
<h4 id="实际代码请下载或者Frok项目。"><a href="#实际代码请下载或者Frok项目。" class="headerlink" title="实际代码请下载或者Frok项目。"></a>实际代码请下载或者Frok项目。</h4><h4 id="项目GitHub地址：https-github-com-ms-liu-ProjectFrameDemo-1"><a href="#项目GitHub地址：https-github-com-ms-liu-ProjectFrameDemo-1" class="headerlink" title="项目GitHub地址：https://github.com/ms-liu/ProjectFrameDemo"></a><a href="https://github.com/ms-liu/ProjectFrameDemo" target="_blank" rel="external">项目GitHub地址：https://github.com/ms-liu/ProjectFrameDemo</a></h4><h4 id="个人邮箱：ms-liu163-163-com"><a href="#个人邮箱：ms-liu163-163-com" class="headerlink" title="个人邮箱：ms_liu163@163.com"></a>个人邮箱：ms_liu163@163.com</h4>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 提升开发效率 </tag>
            
            <tag> 框架 </tag>
            
            <tag> MVP </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
